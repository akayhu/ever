#!/usr/bin/env node

require('babel-core/register')({
	cache: false,
	ignore : function ignore(filename){
		if(/node_modules(\\|\/)c_wap_module/.test(filename)){
			return false;
		}else if(/node_modules(\\|\/).+/.test(filename)){
			return true;
		}else {
			return false;
		}
	}
})

var path = require('path');
var rootDir = path.resolve(__dirname, '..');
process.env.NODE_PATH = path.join(__dirname, '../');
require('module').Module._initPaths();

var paramMap = {};
process.argv.forEach(function(val, index, array){
	var paramSplit = val.split('=');
	if(paramSplit[1]){
		paramMap[paramSplit[0]] = paramSplit[1];
	}
});

var debug = require('debug')('bigc-redux:server');
var express = require('express');
var app = new express();

if(paramMap['--env'] === 'dev'){
	require('../webpack.dev.config')(app);
}else{
	require('../webpack.dev.config')();
}
var WebpackIsomorphicTools = require('webpack-isomorphic-tools');
global.__DEVELOPMENT__ = process.env.NODE_ENV !== 'production';
global.webpackIsomorphicTools = new WebpackIsomorphicTools(require('../webpack-isomorphic-tools-configuration'))
	.server(rootDir, function() {
		//require('../server')(app);
		require('../server')(app);


var http = require('http');
var port = app.get('port');
var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}
	
	var bind = (typeof port === 'string') ? 'Pipe ' + port : 'Port ' + port;

	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

function onListening() {
	var addr = server.address();
	var bind = (typeof addr === 'string') ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}

});
